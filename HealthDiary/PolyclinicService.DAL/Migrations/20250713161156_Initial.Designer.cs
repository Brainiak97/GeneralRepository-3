// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PolyclinicService.DAL.Contexts;

#nullable disable

namespace PolyclinicService.DAL.Migrations
{
    [DbContext(typeof(PolyclinicServiceDbContext))]
    [Migration("20250713161156_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("polyclinics")
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PolyclinicService.Domain.Models.Entities.AppointmentResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("Идентификатор результата приёма к врачу");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentSlotId")
                        .HasColumnType("integer")
                        .HasColumnName("appointment_slot_id")
                        .HasComment("Идентификатор слота на приём к врачу из графика");

                    b.Property<string>("ReportContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("report_content")
                        .HasComment("Содержание отчёта приёма пациента");

                    b.Property<int>("ReportTemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("report_template_id")
                        .HasComment("Идентификатор шаблона отчёта");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentSlotId")
                        .IsUnique();

                    b.ToTable("appointment_results", "polyclinics", t =>
                        {
                            t.HasComment("Результаты приёмов к врачам");
                        });
                });

            modelBuilder.Entity("PolyclinicService.Domain.Models.Entities.AppointmentSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("Идентификатор приёма в графике");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date")
                        .HasComment("Дата приёма");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctor_id")
                        .HasComment("Идентификатор врача");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval")
                        .HasColumnName("end_time")
                        .HasComment("Время окончания приёма");

                    b.Property<int>("PolyclinicId")
                        .HasColumnType("integer")
                        .HasColumnName("polyclinic_id")
                        .HasComment("Идентификатор поликлиники");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval")
                        .HasColumnName("start_time")
                        .HasComment("Время начала приёма");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status")
                        .HasComment("Статус приёма в графике");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id")
                        .HasComment("Идентификатор записанного пациента");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PolyclinicId");

                    b.ToTable("appointment_slots", "polyclinics", t =>
                        {
                            t.HasComment("Данные о приёмах к врачу в графиках поликлиники");
                        });
                });

            modelBuilder.Entity("PolyclinicService.Domain.Models.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("Идентификатор врача");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte?>("AcademyDegree")
                        .HasColumnType("smallint")
                        .HasColumnName("academy_degree")
                        .HasComment("Научная степень врача");

                    b.Property<bool>("IsConfirmedEducation")
                        .HasColumnType("boolean")
                        .HasColumnName("is_confirmed_education")
                        .HasComment("Признак, что у врача подтвержден документ об образовании");

                    b.Property<bool>("IsConfirmedQualification")
                        .HasColumnType("boolean")
                        .HasColumnName("is_confirmed_qualification")
                        .HasComment("Признак, что у врача подтвержден документ о квалификации");

                    b.Property<byte>("QualificationType")
                        .HasColumnType("smallint")
                        .HasColumnName("qualification_type")
                        .HasComment("Квалификация врача");

                    b.Property<byte>("Seniority")
                        .HasColumnType("smallint")
                        .HasColumnName("seniority")
                        .HasComment("Стаж врача");

                    b.Property<byte>("SpecializationType")
                        .HasColumnType("smallint")
                        .HasColumnName("specialization_type")
                        .HasComment("Специализация врача");

                    b.HasKey("Id");

                    b.ToTable("doctors", "polyclinics", t =>
                        {
                            t.HasComment("Врачи поликлиник");
                        });
                });

            modelBuilder.Entity("PolyclinicService.Domain.Models.Entities.Polyclinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("Идентификатор поликлиники");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address")
                        .HasComment("Адрес");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email")
                        .HasComment("Адрес электронной почты");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name")
                        .HasComment("Наименование поликлиники");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_number")
                        .HasComment("Номер телефона");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("url")
                        .HasComment("Ссылка на сайт");

                    b.HasKey("Id");

                    b.ToTable("polyclinics", "polyclinics", t =>
                        {
                            t.HasComment("Поликлиники");
                        });
                });

            modelBuilder.Entity("polyclinic_doctors", b =>
                {
                    b.Property<int>("doctor_id")
                        .HasColumnType("integer");

                    b.Property<int>("polyclinic_id")
                        .HasColumnType("integer");

                    b.HasKey("doctor_id", "polyclinic_id");

                    b.HasIndex("polyclinic_id");

                    b.ToTable("polyclinic_doctors", "polyclinics");
                });

            modelBuilder.Entity("PolyclinicService.Domain.Models.Entities.AppointmentResult", b =>
                {
                    b.HasOne("PolyclinicService.Domain.Models.Entities.AppointmentSlot", "AppointmentSlot")
                        .WithOne()
                        .HasForeignKey("PolyclinicService.Domain.Models.Entities.AppointmentResult", "AppointmentSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentSlot");
                });

            modelBuilder.Entity("PolyclinicService.Domain.Models.Entities.AppointmentSlot", b =>
                {
                    b.HasOne("PolyclinicService.Domain.Models.Entities.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PolyclinicService.Domain.Models.Entities.Polyclinic", null)
                        .WithMany()
                        .HasForeignKey("PolyclinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("polyclinic_doctors", b =>
                {
                    b.HasOne("PolyclinicService.Domain.Models.Entities.Doctor", null)
                        .WithMany()
                        .HasForeignKey("doctor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PolyclinicService.Domain.Models.Entities.Polyclinic", null)
                        .WithMany()
                        .HasForeignKey("polyclinic_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
